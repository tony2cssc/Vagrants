# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "bento/centos-7.2"
  config.vm.hostname = "WOLF"

  config.ssh.insert_key = false
  # config.ssh.private_key_path = "~/.ssh/id_rsa"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # set auto_update to false, if you do NOT want to check the correct 
  # additions version when booting this machine
  # config.vbguest.auto_update = false


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 8000, host: 8000
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
    vb.name = "CentOS-DF"
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
    vb.cpus = 1
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    yum -y update
    yum -y install epel-release
    wget -O ~/remi-release-7.rpm http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
    rpm -Uvh ~/remi-release-7*.rpm
    yum --enablerepo=remi --enablerepo=remi-php56 -y install git curl php php-common php-cli php-curl php-json php-gd php-mbstring php-pdo
    # dependencies for MongoDB
    yum -y install openssl openssl-devel
    yum --enablerepo=remi-php56 -y install php-pear php-devel
    pecl install mongodb
    sed -i 's/;   extension=msql\.so/extension=mongodb\.so/g' /etc/php.ini

    /vagrant_data/composer_installer.sh
    mv composer.phar /usr/local/bin/composer

    wget -O ~/mysql57-community-release-el7-8.noarch.rpm http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm
    rpm -ivh ~/mysql57-community-release-el7-8.noarch.rpm
    yum -y install mysql-server
    yum --enablerepo=remi-php56 -y install php-mysqlnd
    echo '
# Optimized settings for Dreamfactory
default-storage-engine = InnoDB
innodb-file-per-table = 1
innodb_stats_on_metadata = 0
character-set-server = utf8
collation-server = utf8_general_ci' |  tee -a /etc/my.cnf
    systemctl start mysqld

    git clone https://github.com/dreamfactorysoftware/dreamfactory.git /vagrant_data/df2
    cd /vagrant_data/df2
    git checkout 2.3.0
    composer install --no-dev
  SHELL

  # After completing this shell, you need to execute below commnad to complete the setup
  # 
  # Setup DB #
  #  mysql_secure_installation
  # the default password can be get by cat /var/log/mysqld.log | grep generated
  # $ mysql -u root 
  # mysql> create database dreamfactory;
  # mysql> grant all privileges on dreamfactory.* to 'df_admin'@'localhost' IDENTIFIED BY 'df_admin01';
  # FLUSH PRIVILEGES;
  # mysql> quit
  # 
  # Setup Dreamfactory #
  # php artisan dreamfactory:setup
  # 
end
